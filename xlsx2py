#!/usr/bin/env python3
# Copyright (C) Michael Cook <michael@waxrat.com>
import sys
import argparse
import re
import datetime
import openpyxl
from openpyxl.formula.tokenizer import Token

parser = argparse.ArgumentParser(description="""
Convert a .xlsx file to a .py file
""")
parser.add_argument('--print', '-p', action='append', default=[], help="""
Add a print statement to the end of the output.
Can be given multiple times
""")
parser.add_argument('xlsx')
OPTS = parser.parse_args()
del parser

NONSYM_RE = re.compile(r'\W+')

def make_sheet_name(title):
    name = NONSYM_RE.sub('_', title)
    return f'Sheet_{name}'

RANGE_RE = re.compile(r'^'
                      r"((?P<sheet>'.*'|.*)!)?"
                      r'\$?(?P<start_col>[A-Z]+)\$?(?P<start_row>[0-9]+)'
                      r'(:\$?(?P<end_col>[A-Z]+)\$?(?P<end_row>[0-9]+))?'
                      r'$')

def column_letters_to_index(letters: str):
    """
    A -> 1, B -> 2, ..., Z -> 26, AA -> 27, AB -> 28, ...
    """
    index = 0
    for letter in letters:
        c = ord(letter) - ord('A') + 1
        if c < 1 or c > 26:
            raise Exception(f'Invalid column letter {letter!r}')
        index = index * 26 + c
    return index

def range_to_python(sheet_name, text):
    """
    `text` is a string representation of a range, like A1:B2.
    Convert `text` to Python code
    """
    match = RANGE_RE.match(text)
    if not match:
        raise Exception(f'Malformed range {text!r}')
    match = match.groupdict()

    sheet = match['sheet']
    if sheet is None:
        sheet = sheet_name
    else:
        if len(sheet) >= 2 and sheet.startswith("'") and sheet.endswith("'"):
            sheet = sheet[1:-1]
        sheet = make_sheet_name(sheet)

    start_col = match['start_col']
    start_row = match['start_row']
    end_col = match['end_col']
    end_row = match['end_row']

    start_coli = column_letters_to_index(start_col)
    start_rowi = int(start_row)

    if end_col is None:
        end_coli = start_coli
        end_rowi = start_rowi
    else:
        end_coli = column_letters_to_index(end_col)
        end_rowi = int(end_row)

    if (start_coli, start_rowi) == (end_coli, end_rowi):
        return f'{sheet}.{start_col}{start_row}()'
    return f'RANGE({sheet}, {start_coli}, {start_rowi}, {end_coli}, {end_rowi})'

def expect_token(tokens, expect_type, expect_value):
    if not tokens:
        return None
    if tokens[0].type != expect_type or tokens[0].value != expect_value:
        return None
    return tokens.pop(0)

def get_expression_tokens(tokens: list[Token]):
    """
    Remove from `tokens` all the tokens of a complete expression.
    That is, everything up to the next ',' or unmatched ')'.
    Return a (possibly empty) list of the removed tokens
    """
    expression = []
    while tokens:
        token = tokens.pop(0)

        if token.type == Token.PAREN:
            if token.value == ')':
                tokens.insert(0, token)
                break
            assert token.value == '('
            expression.append(token)
            expression.extend(get_expression_tokens(tokens))
            token = expect_token(tokens, Token.PAREN, ')')
            if not token:
                raise Exception(f'Expected ): {tokens}')
            expression.append(token)
            continue

        if token.type == Token.FUNC:
            if token.value == ')':
                assert token.subtype == Token.CLOSE
                tokens.insert(0, token)
                break
            assert token.subtype == Token.OPEN
            expression.append(token)

            token = expect_token(tokens, Token.FUNC, ')')
            if token:
                expression.append(token)
            else:
                while True:
                    expression.extend(get_expression_tokens(tokens))
                    token = expect_token(tokens, Token.FUNC, ')')
                    if token:
                        expression.append(token)
                        break
                    token = expect_token(tokens, Token.SEP, ',')
                    if not token:
                        raise Exception(f'Expected ) or ,: {tokens}')
                    expression.append(token)
            continue

        if token.type == Token.SEP and token.value == ',':
            tokens.insert(0, token)
            break

        expression.append(token)
    return expression

def function_to_python(sheet_name: str, function_name: str, tokens: list[Token]):
    args = []   # a list of arguments. Each argument is a list of expressions
    if not expect_token(tokens, Token.FUNC, ')'):
        #print(f'xxx function_to_python {function_name}: {tokens}', file=sys.stderr)
        while True:
            args.append(get_expression_tokens(tokens))
            if expect_token(tokens, Token.FUNC, ')'):
                break
            if not expect_token(tokens, Token.SEP, ','):
                raise Exception(f'Expected ) or ,: {tokens}')

    if function_name == 'IF':
        if len(args) == 3:
            cond_expr, if_expr, else_expr = args
            else_expr = tokens_to_python(sheet_name, else_expr)
        elif len(args) == 2:
            cond_expr, if_expr = args
            else_expr = 0
        else:
            raise Exception('Wrong arguments for IF: {args}')
        cond_expr = tokens_to_python(sheet_name, cond_expr)
        if_expr = tokens_to_python(sheet_name, if_expr)
        return f'{if_expr} if {cond_expr} else {else_expr}'

    if function_name == 'ISFORMULA':
        if len(args) != 1 or len(args[0]) != 1:
            raise Exception('Wrong arguments for ISFORMULA: {args}')
        # ISFORMULA expect exactly one argument: the coordinates of a cell.
        #
        # If given a range (even a range of a single cell like A1:A1),
        # ISFORMULA returns false.  We don't currently try to handle that
        # pathological case here
        arg = args[0][0]
        if arg.type != Token.OPERAND or arg.subtype != Token.RANGE:
            raise Exception('Wrong arguments for ISFORMULA: {args}')
        arg = range_to_python(sheet_name, arg.value)
        if not arg.endswith('()'):
            raise Exception('Wrong arguments for ISFORMULA: {args}')
        return f'{arg[:-2]} in {sheet_name}.formula_methods'

    args = ', '.join(tokens_to_python(sheet_name, expr) for expr in args)
    return f'{function_name}({args})'

OPERATOR_TO_PYTHON = {
    '=': '==',
    '<>': '!=',
}

def clean_function_name(value: str):
    """
    Clean up the function name:
    'IF(' -> 'IF'
    '_xlfn.ISFORMULA(' -> 'ISFORMULA'
    """
    return value.removesuffix('(').removeprefix('_xlfn.')

def tokens_to_python(sheet_name: str, tokens: list[Token]):
    """
    Convert the tokens to Python code.
    `tokens` as parsed by openpyxl.formula.Tokenizer.
    See https://openpyxl.readthedocs.io/en/stable/formula.html
    """

    if not tokens:
        return ''

    if tokens[0].type == Token.FUNC and tokens[0].subtype == Token.OPEN:
        token = tokens.pop(0)
        return function_to_python(sheet_name, clean_function_name(token.value), tokens)

    if expect_token(tokens, Token.PAREN, '('):
        code = tokens_to_python(sheet_name, tokens)
        if not expect_token(tokens, Token.PAREN, ')'):
            raise Exception('Expected ): {tokens}')
        return f'({code})'

    # Collect and convert all tokens up to but not including the
    # next separator or close paren
    code = ''
    while tokens:
        token = tokens.pop(0)
        if token.type == Token.OP_IN:
            code += f' {OPERATOR_TO_PYTHON.get(token.value, token.value)} '
        elif token.type == Token.OP_PRE:
            code += f' {token.value}'
        elif token.type == Token.OP_POST:
            code += token.value
        elif token.type == Token.PAREN:
            code += token.value
        elif token.type == Token.OPERAND and token.subtype == Token.NUMBER:
            code += token.value
        elif token.type == Token.OPERAND and token.subtype == Token.TEXT:
            code += token.value
        elif token.type == Token.OPERAND and token.subtype == Token.RANGE:
            code += range_to_python(sheet_name, token.value)
        elif token.type == Token.WSPACE:
            pass
        elif token.type == Token.FUNC and token.subtype == Token.OPEN:
            code += function_to_python(sheet_name, clean_function_name(token.value), tokens)
        else:
            raise Exception(f'Unexpected: {token}')
    return code

def formula_to_python(sheet_name: str, formula: str):
    tokens = openpyxl.formula.Tokenizer(formula).items
    code = tokens_to_python(sheet_name, tokens)
    if tokens:
        raise Exception(f'Trailing: {tokens}')
    return code

def cell_to_python(sheet_name: str, cell):
    """
    Convert the given `cell` value to Python code
    """
    v = cell.value
    if isinstance(v, datetime.datetime):
        return f'DATE({v.year}, {v.month}, {v.day}, {v.hour}, {v.minute})'
    if isinstance(v, datetime.time):
        return f'TIME({v.hour}, {v.minute}, {v.second}, {v.microsecond})'
    if isinstance(v, str) and v.startswith('='):
        return formula_to_python(sheet_name, v)
    return repr(v)

def set_cell(cells, column: int, row :int, value: str):
    """
    `cells` is a (potentially empty) list of rows.
    Each row is a (potentially empty) list of values associated with the cells of that row.
    `column` and `row` are 1-based indexes.
    Set the (column-1,row-1) entry to `value`, expanding `cells` as needed
    """
    cells.extend([] for _ in range(row - len(cells)))
    columns = cells[row - 1]
    columns.extend(None for _ in range(column - len(columns)))
    columns[column - 1] = value

def put_sheet_descriptor(name: str, descriptor):
    """
    `descriptor` is a list of rows.
    Each row is a list of cell values.
    Print this `descriptor` as a Python tuple of tuples
    """
    print(f'\n{name} = (')
    for row in descriptor:
        # Empty row becomes (), the empty tuple.
        # Row of a single cell needs a trailing comma to make it a Python tuple: (x,).
        # Longer rows have the cells separated by commas, and the optional
        # trailing comma is included.
        print('    (', end='')
        cells = list('None' if cell is None else cell for cell in row)
        if cells:
            print(', '.join(cells), ',', sep='', end='')
        print('),')
    print(f')')

def main():
    wb = openpyxl.load_workbook(OPTS.xlsx)
    print('from Xlsx import *')
    sheet_names = []
    for ws in wb.worksheets:
        sheet_name = make_sheet_name(ws.title)
        sheet_names.append(sheet_name)
        print(f'\nclass {sheet_name}(metaclass=SheetType):')
        cell_methods = []
        formula_methods = []
        for row in ws.rows:
            first = True
            for cell in row:
                if cell.value is None:
                    continue
                if first:
                    print(f'    # row {cell.row}')
                    first = False
                print(f'    @staticmethod')
                print(f'    def {cell.coordinate}():')
                comment = getattr(cell, 'comment')
                if comment:
                    print(f'        """')
                    for line in comment.text.split('\n'):
                        print(f'        {line}')
                    print(f'        """')
                print(f'        return {cell_to_python(sheet_name, cell)}')
                print()

                set_cell(cell_methods, cell.column, cell.row, f'{sheet_name}.{cell.coordinate}')

                if isinstance(cell.value, str) and cell.value.startswith('='):
                    formula_methods.append(f'{sheet_name}.{cell.coordinate}')

        put_sheet_descriptor(f'{sheet_name}.cell_methods', cell_methods)

        print(f'{sheet_name}.formula_methods = set((')
        for name in formula_methods:
            print(f'    {name},')
        print(f'))')

    print('SHEETS = (')
    for sheet_name in sheet_names:
        print(f'    {sheet_name},')
    print(')')

    for expr in OPTS.print:
        print(f'print({expr})')

main()
